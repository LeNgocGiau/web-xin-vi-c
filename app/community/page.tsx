"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Heart, MessageCircle, Share2, TrendingUp, Users, Award } from "lucide-react"

export default function CommunityPage() {
  const [searchQuery, setSearchQuery] = useState("")
  const [newPost, setNewPost] = useState("")
  const [likedPosts, setLikedPosts] = useState<number[]>([])

  const posts = [
    {
      id: 1,
      author: {
        name: "Nguy·ªÖn VƒÉn A",
        avatar: "/placeholder.svg?height=40&width=40",
        title: "Frontend Developer",
        company: "TechCorp",
      },
      content:
        "V·ª´a ho√†n th√†nh d·ª± √°n React ƒë·∫ßu ti√™n! C·∫£m ∆°n c·ªông ƒë·ªìng JobFind ƒë√£ h·ªó tr·ª£ t√¥i trong su·ªët qu√° tr√¨nh h·ªçc t·∫≠p. T·ª´ m·ªôt ng∆∞·ªùi kh√¥ng bi·∫øt g√¨ v·ªÅ l·∫≠p tr√¨nh, gi·ªù t√¥i ƒë√£ c√≥ th·ªÉ t·ª± tin ·ª©ng tuy·ªÉn v√†o c√°c v·ªã tr√≠ Frontend Developer.",
      timestamp: "2 gi·ªù tr∆∞·ªõc",
      likes: 24,
      comments: 8,
      shares: 3,
      tags: ["React", "Frontend", "Success Story"],
      image: "/placeholder.svg?height=200&width=400",
    },
    {
      id: 2,
      author: {
        name: "Tr·∫ßn Th·ªã B",
        avatar: "/placeholder.svg?height=40&width=40",
        title: "UX Designer",
        company: "DesignStudio",
      },
      content:
        "Chia s·∫ª m·ªôt s·ªë tips ƒë·ªÉ chu·∫©n b·ªã cho bu·ªïi ph·ªèng v·∫•n UX Designer:\n\n1. Chu·∫©n b·ªã portfolio chi ti·∫øt\n2. Hi·ªÉu r√µ v·ªÅ c√¥ng ty v√† s·∫£n ph·∫©m\n3. Luy·ªán t·∫≠p tr√¨nh b√†y case study\n4. Chu·∫©n b·ªã c√¢u h·ªèi ƒë·ªÉ h·ªèi interviewer\n\nCh√∫c c√°c b·∫°n th√†nh c√¥ng! üí™",
      timestamp: "5 gi·ªù tr∆∞·ªõc",
      likes: 45,
      comments: 12,
      shares: 8,
      tags: ["UX Design", "Interview Tips", "Career Advice"],
    },
    {
      id: 3,
      author: {
        name: "L√™ VƒÉn C",
        avatar: "/placeholder.svg?height=40&width=40",
        title: "Marketing Manager",
        company: "StartupXYZ",
      },
      content:
        "Startup c·ªßa ch√∫ng t√¥i ƒëang tuy·ªÉn th√™m 2 v·ªã tr√≠ Marketing Executive. Ai quan t√¢m c√≥ th·ªÉ inbox m√¨nh nh√©! M√¥i tr∆∞·ªùng tr·∫ª, nƒÉng ƒë·ªông, nhi·ªÅu c∆° h·ªôi ph√°t tri·ªÉn.",
      timestamp: "1 ng√†y tr∆∞·ªõc",
      likes: 18,
      comments: 15,
      shares: 5,
      tags: ["Job Opening", "Marketing", "Startup"],
    },
  ]

  const trendingTopics = [
    { name: "Remote Work", posts: 156 },
    { name: "AI in Recruitment", posts: 89 },
    { name: "Salary Negotiation", posts: 67 },
    { name: "Career Switch", posts: 45 },
    { name: "Interview Tips", posts: 123 },
  ]

  const successStories = [
    {
      name: "Ph·∫°m Th·ªã D",
      story: "T·ª´ th·∫•t nghi·ªáp 6 th√°ng ƒë·∫øn Senior Developer",
      timeframe: "3 th√°ng",
      avatar: "/placeholder.svg?height=40&width=40",
    },
    {
      name: "Ho√†ng VƒÉn E",
      story: "Chuy·ªÉn ng√†nh t·ª´ k·∫ø to√°n sang Data Science",
      timeframe: "8 th√°ng",
      avatar: "/placeholder.svg?height=40&width=40",
    },
  ]

  const handleLike = (postId: number) => {
    setLikedPosts((prev) => (prev.includes(postId) ? prev.filter((id) => id !== postId) : [...prev, postId]))
  }

  const handleShare = (postId: number) => {
    alert("ƒê√£ chia s·∫ª b√†i vi·∫øt!")
  }

  const handleComment = (postId: number) => {
    alert("T√≠nh nƒÉng b√¨nh lu·∫≠n s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong phi√™n b·∫£n ti·∫øp theo!")
  }

  const handleCreatePost = () => {
    if (newPost.trim()) {
      alert("B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c ƒëƒÉng th√†nh c√¥ng!")
      setNewPost("")
    }
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Sidebar */}
          <div className="lg:col-span-1 space-y-6">
            {/* Trending Topics */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <TrendingUp className="h-5 w-5" />
                  Ch·ªß ƒë·ªÅ th·ªãnh h√†nh
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {trendingTopics.map((topic, index) => (
                  <div key={index} className="flex justify-between items-center">
                    <span className="text-sm font-medium">{topic.name}</span>
                    <Badge variant="secondary">{topic.posts}</Badge>
                  </div>
                ))}
              </CardContent>
            </Card>

            {/* Success Stories */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Award className="h-5 w-5" />
                  C√¢u chuy·ªán th√†nh c√¥ng
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {successStories.map((story, index) => (
                  <div key={index} className="flex items-start gap-3">
                    <Avatar className="h-8 w-8">
                      <AvatarImage src={story.avatar || "/placeholder.svg"} />
                      <AvatarFallback>{story.name[0]}</AvatarFallback>
                    </Avatar>
                    <div className="flex-1">
                      <p className="text-sm font-medium">{story.name}</p>
                      <p className="text-xs text-gray-600">{story.story}</p>
                      <p className="text-xs text-blue-600">{story.timeframe}</p>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          </div>

          {/* Main Content */}
          <div className="lg:col-span-3 space-y-6">
            {/* Header */}
            <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between">
              <div>
                <h1 className="text-3xl font-bold">C·ªông ƒë·ªìng JobFind</h1>
                <p className="text-gray-600">K·∫øt n·ªëi, chia s·∫ª v√† h·ªçc h·ªèi c√πng c·ªông ƒë·ªìng</p>
              </div>
              <div className="flex items-center gap-2 text-sm text-gray-600">
                <Users className="h-4 w-4" />
                <span>12,345 th√†nh vi√™n</span>
              </div>
            </div>

            {/* Search */}
            <div className="flex gap-4">
              <Input
                placeholder="T√¨m ki·∫øm b√†i vi·∫øt, ch·ªß ƒë·ªÅ..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="flex-1"
              />
              <Button>T√¨m ki·∫øm</Button>
            </div>

            {/* Create Post */}
            <Card>
              <CardHeader>
                <CardTitle>Chia s·∫ª v·ªõi c·ªông ƒë·ªìng</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <Textarea
                  placeholder="B·∫°n ƒëang nghƒ© g√¨? Chia s·∫ª kinh nghi·ªám, c√¢u h·ªèi ho·∫∑c th√†nh t·ª±u c·ªßa b·∫°n..."
                  value={newPost}
                  onChange={(e) => setNewPost(e.target.value)}
                  rows={3}
                />
                <div className="flex justify-between items-center">
                  <div className="flex gap-2">
                    <Button variant="outline" size="sm">
                      üì∑ ·∫¢nh
                    </Button>
                    <Button variant="outline" size="sm">
                      üìä Kh·∫£o s√°t
                    </Button>
                    <Button variant="outline" size="sm">
                      üéØ Th·∫ª
                    </Button>
                  </div>
                  <Button onClick={handleCreatePost} disabled={!newPost.trim()}>
                    ƒêƒÉng b√†i
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Posts */}
            <div className="space-y-6">
              {posts.map((post) => (
                <Card key={post.id}>
                  <CardContent className="p-6">
                    {/* Post Header */}
                    <div className="flex items-start gap-3 mb-4">
                      <Avatar>
                        <AvatarImage src={post.author.avatar || "/placeholder.svg"} />
                        <AvatarFallback>{post.author.name[0]}</AvatarFallback>
                      </Avatar>
                      <div className="flex-1">
                        <div className="flex items-center gap-2">
                          <h3 className="font-semibold">{post.author.name}</h3>
                          <Badge variant="outline" className="text-xs">
                            {post.author.title}
                          </Badge>
                        </div>
                        <p className="text-sm text-gray-600">{post.author.company}</p>
                        <p className="text-xs text-gray-500">{post.timestamp}</p>
                      </div>
                    </div>

                    {/* Post Content */}
                    <div className="mb-4">
                      <p className="text-gray-800 whitespace-pre-line mb-3">{post.content}</p>
                      {post.image && (
                        <img
                          src={post.image || "/placeholder.svg"}
                          alt="Post image"
                          className="w-full rounded-lg max-h-64 object-cover"
                        />
                      )}
                    </div>

                    {/* Tags */}
                    <div className="flex flex-wrap gap-2 mb-4">
                      {post.tags.map((tag, index) => (
                        <Badge key={index} variant="secondary" className="text-xs">
                          #{tag}
                        </Badge>
                      ))}
                    </div>

                    {/* Post Actions */}
                    <div className="flex items-center justify-between pt-4 border-t">
                      <div className="flex items-center gap-6">
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleLike(post.id)}
                          className={`flex items-center gap-2 ${likedPosts.includes(post.id) ? "text-red-500" : ""}`}
                        >
                          <Heart className={`h-4 w-4 ${likedPosts.includes(post.id) ? "fill-current" : ""}`} />
                          {post.likes + (likedPosts.includes(post.id) ? 1 : 0)}
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleComment(post.id)}
                          className="flex items-center gap-2"
                        >
                          <MessageCircle className="h-4 w-4" />
                          {post.comments}
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleShare(post.id)}
                          className="flex items-center gap-2"
                        >
                          <Share2 className="h-4 w-4" />
                          {post.shares}
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>

            {/* Load More */}
            <div className="text-center">
              <Button variant="outline">Xem th√™m b√†i vi·∫øt</Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
